Configurar datos usuario git
git config --global user.name "AngelTravieso"
git config --global user.email "angeltraviesoc@gmail.com"

Chequear datos de usuario guardados
git config --global -e

Crear repositorio local
git init

Agregar archivos al repositorio
git add [nombre_archivo]
git add . (para agregar todo)

Ver estatus de los archivos del repositorio
git status

Crear commit y guardar registros
git commit -m [mensaje_commit]

Para volver al ultimo commit hecho
git checkout -- .

Dejar archivo en su ultimo commit
git checkout -- [nombre_archivo]
git checkout -- README.md

Ver registros de commits
git log

Ver registros de commits resumido
git log --oneline

Ver registros de commits de manera elegante, con sus graficos, etc
git log --oneline --decorate --all --graph

Ver los archivos modificados y que estan en el stage
git status -s
	
Ver los archivos modificados y la rama en la que se está trabajando
git status -s -b

Agregar todos los archivos con la extension indicada
git add *.png

Agregar archivos que se encuentren dentro de una carpeta
git add css/

Agregar todos los archivos que fueron modificados

Excluir archivo del stage
git reset [nombre_archivo]
git reset *.xml
git reset HEAD README.md
git checkout -- README.md

Agregar todos los txt de todo el proyecto
git add "*.txt"

Agrega todos los txt en el directorio actual
git add *.txt

agrega todos los archivos modificados
git add --all

Agrega los archivos que listemos
git add [lista de archivos]

Agrega todos los PDFs dentro de la carpeta PDFs
git add pdfs/*.pdf

Agrega todos los archicos dentro de la carpeta PDFs
git add pdfs/

Crear alias
git config --global alias.[nombre_alias] "[accion del comando]"
git config --global alias.lg "log --oneline --decorate --all --graph"
git config --global alias.s "status -s -b"

Ver configuracion general
git config --global -e (abre vim)
git config --global -l

Ver diferencias entre commits
git diff

Ver diferencias (que verifique tambien los archivos en staged)
git diff --staged

Agregar al stage y hacer commit
git commit -am "Commit"

Cambiar mensaje de commit
git commit --amend -m "Actualizamos el readme.md"

Resetear el repositorio al commit anterior
Esto es util cuando queremos agregar un archivo que se nos olvido anexar al commit anterior y que debe estar si o si en ese commit
* --soft: Le indica a git que no debe modificar los archivos del directorio actual

git reset --soft HEAD~[numero de retrocesos]
git reset --soft HEAD~1


Quita los cambios , no los destruye, solo son quitados del stage pero aun tienen las modificaciones
git reset --mixed [hash_commit]
git reset --mixed 94s6s84

Te lleva a ese commit en particular y elimina todo lo que seguía despues (no tiene las modificaciones)
git reset --hard [hash_commit]
git reset --mixed 94s6s84


Git siempre mantiene un historial con lo que sucede en el repositorio así se hayan hecho resets

Muestra el historial de los movimientos que se han hecho en el repositorio, esto es util para moverse hacia adelante en la linea del tiempo si es necesario
git reflog
git reset --hard [hash_commit]


Cambiar el nombre de un archivo
git mv [nombre_actual] [nombre_nuevo]
git mv destruir-mundo.txt salvar-mundo.txt

Eliminar archivo creado
git rm [nombre_achivo]
git rm salvar-mundo.txt

* Después se debe hacer un commit para poder hacer seguimiento de esto en el repositorio y volver si atrás si es necesario *

Para cambiar y eliminar archivos fuera de git
1- Primero cambiamos el nombre de manera manual en nuestro editor de texto preferido

* Al hacer esto git toma estos cambios como si se tratara de un archivo nuevo, por lo que debemos hacer un update para que lo tome como un renombre *

2- git add -u (esto le dice a git que el archivo queda renombrado)

* Pero aun queda el "archivo sin hacer seguimiento" para corregirlo se agrega al stage *

3- git add -A
4- git commit -m [mensaje]

Para eliminar
git add -u
git add -A
git commit -m [mensaje]




